void findLocations(string tweet, vector<pair<double, double>>& coordinateList) {
    ifstream file("cities1000.txt");
    string city;
    while (getline(file, city, '\t')) {
        getline(file, city, '\t');
        if (tweet.find(city) != string::npos) {
            int count = 0;
            string lat;
            string lon;
            while (count++ < 3) {
                getline(file, lat, '\t');
            }
            getline(file, lon, '\t');
            coordinateList.push_back(pair<double, double>(stod(lat), stod(lon)));
        }
        getline(file, city, '\n');
    }
}

//bwead class is called: splay
template<typename structure>
void populateDataStructures(vector<string> tweets, structure data) {
    vector<pair<double, double>> locations;
    for (int i = 0; i < tweets.size(); i++) {
        string tweet = tweets.at(i);

        findLocations(tweet, locations);
    }

    for (int i = 0; i < locations.size(); i++) {
        data.addLocation(locations.at(i));
    }
}


vector<string> bweadfunctionrandomprofile(int numberProfiles);
vector<string> bweadfunctionLookup(string profilelink);
string bweadfunctionRealLocation(string profileLink);

pair<double, double> getRealLocation(string realLocation) {
    vector<pair<double, double>> possibleLocations;
    findLocations(realLocation, possibleLocations);

    pair<double, double> location;
    if (!possibleLocations.empty()) {
        location = possibleLocations.at(0);
    }

    return location;
}

template<typename structure>
pair<pair<double, double>, double> generateMap(vector<string> tweets) {
    structure data;
    populateDataStructures<structure>(tweets, data);
    vector<pair<double, double>> guess = data.getCentralLocation();
    pair<pair<double, double>, double> circle = verticesToMap(guess);
    return circle;
}
