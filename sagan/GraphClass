class LocationAdjacencyGraph {
private:
    struct Node {
        vector<Node*> adjacencyList;
        vector<double> distance;
        pair<double, double> storedLocation;
    };
    vector<Node*> vertices;
    Node* getClosestNode(pair<double, double> insertedLocation) {
        double minimum;
        Node* closest = nullptr;
        for (int i = 0; i < vertices.size(); i++) {
            double distance = distanceBetween(vertices.at(i)->storedLocation, insertedLocation);
            if (i == 0 || distance < minimum) {
                minimum = distance;
                closest = vertices.at(i);
            }
        }
        return closest;
    }

public:
    ~LocationAdjacencyGraph() {
        for (int i = 0; i < vertices.size(); i++) {
            delete vertices.at(i);
        }
    }

    void addLocation(pair<double, double> insertedLocation) {
        Node* closest = getClosestNode(insertedLocation);
        if (closest == nullptr) {
            Node* currentNode = new Node;
            currentNode->storedLocation = insertedLocation;
            vertices.push_back(currentNode);
        } else if (closest->storedLocation == insertedLocation) {
            closest->adjacencyList.push_back(closest);
            closest->distance.push_back(0);
        } else {
            Node* currentNode = new Node;
            currentNode->storedLocation = insertedLocation;
            currentNode->adjacencyList.push_back(closest);
            closest->adjacencyList.push_back(currentNode);
            double distance = distanceBetween(closest->storedLocation, insertedLocation);
            currentNode->distance.push_back(distance);
            closest->distance.push_back(distance);
        }
    }

    vector<pair<double, double>> getCentralLocation() {
        Node* central = nullptr;
        for (int i = 0; i < vertices.size(); i++) {
            if (i == 0 || vertices.at(i)->adjacencyList.size() > central->adjacencyList.size()) {
                central = vertices.at(i);
            } else if (vertices.at(i)->adjacencyList.size() == central->adjacencyList.size()) {
                double currentTotal = 0;
                for (int j = 0; j < vertices.at(i)->distance.size(); j++) {
                    currentTotal += vertices.at(i)->distance.at(j);
                }
                double centralTotal = 0;
                for (int j = 0; j < central->distance.size(); j++) {
                    centralTotal += central->distance.at(j);
                }
                if (currentTotal < centralTotal) {
                    central = vertices.at(i);
                }
            }
        }
        vector<pair<double, double>> locations;
        locations.push_back(central->storedLocation);

        for (int i = 0; i < central->adjacencyList.size(); i++) {
            locations.push_back(central->adjacencyList.at(i)->storedLocation);
        }

        return locations;
    }
};
